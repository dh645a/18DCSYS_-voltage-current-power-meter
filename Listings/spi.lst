C251 COMPILER V5.60.0,  spi                                                                29/10/24  08:37:10  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE spi
OBJECT MODULE PLACED IN .\Output\spi.obj
COMPILER INVOKED BY: D:\Program Files\keil5\C251\BIN\C251.EXE base\SPI\spi.c XSMALL BROWSE INCDIR(..\COMM;.\base;.\base\
                    -LCD;.\middle\LCDapp;.\base\adc;.\base\KEY;.\base\TIME;.\Src;.\middle\Adjust;.\Src;.\middle\WAVE;.\base\SPI;.\base\PWM;.\
                    -base\BUZZER;.\middle\ALARM;.\middle\MENU;.\Driver\inc) DEBUG PRINT(.\Listings\spi.lst) TABS(2) OBJECT(.\Output\spi.obj) 

stmt  level    source

    1          #include "spi.h"
    2          #include "lcd_init.h"
    3          /*************  本地常量声明    **************/
    4          
    5          #define HSCK_MCLK       0
    6          #define HSCK_PLL        1
    7          #define HSCK_SEL        HSCK_PLL
    8          
    9          #define PLL_96M         0
   10          #define PLL_144M        1
   11          #define PLL_SEL         PLL_96M
   12          
   13          #define CKMS            0x80
   14          #define HSIOCK          0x40
   15          #define MCK2SEL_MSK     0x0c
   16          #define MCK2SEL_SEL1    0x00
   17          #define MCK2SEL_PLL     0x04
   18          #define MCK2SEL_PLLD2   0x08
   19          #define MCK2SEL_IRC48   0x0c
   20          #define MCKSEL_MSK      0x03
   21          #define MCKSEL_HIRC     0x00
   22          #define MCKSEL_XOSC     0x01
   23          #define MCKSEL_X32K     0x02
   24          #define MCKSEL_IRC32K   0x03
   25          
   26          #define ENCKM           0x80
   27          #define PCKI_MSK        0x60
   28          #define PCKI_D1         0x00
   29          #define PCKI_D2         0x20
   30          #define PCKI_D4         0x40
   31          #define PCKI_D8         0x60
   32          
   33          void HAL_SPI_Init(void)
   34          {
   35   1          SPCTL |=  (1 << 7); //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   36   1          SPCTL |=  (1 << 6); //使能 SPI 功能
   37   1          SPCTL &= ~(1 << 5); //先发送/接收数据的高位（ MSB）
   38   1          SPCTL |=  (1 << 4); //设置主机模式
   39   1          SPCTL &= ~(1 << 3); //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降沿
   40   1          SPCTL &= ~(1 << 2); //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数据
   41   1          SPCTL = (SPCTL & ~3) | 3;   //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 2T
   42   1          HSSPI_CFG2|=0x20;//使能高速SPI
   43   1          P_SW1 = (P_SW1 & ~(3<<2)) | (0<<2);     //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 1: P2.2 P2.3 P2.4 P2
             -.5, 2: P5.4 P4.0 P4.1 P4.3, 3: P3.5 P3.4 P3.3 P3.2
   44   1          OLED_SCLK = 0;    // set clock to low initial state
   45   1          OLED_SDIN = 1;
   46   1          SPIF = 1;   //清SPIF标志
   47   1          WCOL = 1;   //清WCOL标志
   48   1        
   49   1      }
   50          void SPI_init(void)//高速spi
   51          {
   52   1          //选择PLL输出时钟
   53   1      #if (PLL_SEL == PLL_96M)
   54   1          CLKSEL &= ~CKMS;            //选择PLL的96M作为PLL的输出时钟
   55   1      #elif (PLL_SEL == PLL_144M)
                   CLKSEL |= CKMS;             //选择PLL的144M作为PLL的输出时钟
C251 COMPILER V5.60.0,  spi                                                                29/10/24  08:37:10  PAGE 2   

               #else
                   CLKSEL &= ~CKMS;            //默认选择PLL的96M作为PLL的输出时钟
               #endif
   60   1      
   61   1          //选择PLL输入时钟分频,保证输入时钟为12M
   62   1          USBCLK &= ~PCKI_MSK;
   63   1      #if (MAIN_Fosc == 12000000UL)
                   USBCLK |= PCKI_D1;          //PLL输入时钟1分频
               #elif (MAIN_Fosc == 24000000UL)
                   USBCLK |= PCKI_D2;          //PLL输入时钟2分频
               #elif (MAIN_Fosc == 48000000UL)
                   USBCLK |= PCKI_D4;          //PLL输入时钟4分频
               #elif (MAIN_Fosc == 96000000UL)
                   USBCLK |= PCKI_D8;          //PLL输入时钟8分频
               #else
   72   1          USBCLK |= PCKI_D1;          //默认PLL输入时钟1分频
   73   1      #endif
   74   1      
   75   1          //启动PLL
   76   1          USBCLK |= ENCKM;            //使能PLL倍频
   77   1          delay_ms(1);                //等待PLL锁频
   78   1      
   79   1          //选择HSPWM/HSSPI时钟
   80   1      #if (HSCK_SEL == HSCK_MCLK)
                   CLKSEL &= ~HSIOCK;          //HSPWM/HSSPI选择主时钟为时钟源
               #elif (HSCK_SEL == HSCK_PLL)
   83   1          CLKSEL |= HSIOCK;           //HSPWM/HSSPI选择PLL输出时钟为时钟源
   84   1      #else
                   CLKSEL &= ~HSIOCK;          //默认HSPWM/HSSPI选择主时钟为时钟源
               #endif
   87   1      
   88   1          HSCLKDIV = 1;               //HSPWM/HSSPI时钟源4分频
   89   1      
   90   1      //    SSIG = 1; //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   91   1      //    SPEN = 1; //使能 SPI 功能
   92   1      //    DORD = 0; //先发送/接收数据的高位（ MSB）
   93   1      //    MSTR = 1; //设置主机模式
   94   1      //    CPOL = 1; //SCLK 空闲时为高电平，SCLK 的前时钟沿为下降沿，后时钟沿为上升沿
   95   1      //    CPHA = 1; //数据在 SCLK 前时钟沿驱动，后时钟沿采样
   96   1          SPCTL |=  (1 << 7); //忽略 SS 引脚功能，使用 MSTR 确定器件是主机还是从机
   97   1          SPCTL |=  (1 << 6); //使能 SPI 功能
   98   1          SPCTL &= ~(1 << 5); //先发送/接收数据的高位（ MSB）
   99   1          SPCTL |=  (1 << 4); //设置主机模式
  100   1          SPCTL &= ~(1 << 3); //SCLK 空闲时为低电平，SCLK 的前时钟沿为上升沿，后时钟沿为下降沿
  101   1          SPCTL &= ~(1 << 2); //数据 SS 管脚为低电平驱动第一位数据并在 SCLK 的后时钟沿改变数据
  102   1          SPCTL = (SPCTL & ~3) | 2;   //SPI 时钟频率选择, 0: 4T, 1: 8T,  2: 16T,  3: 2T
  103   1          //P_SW1 = (P_SW1 & ~(3<<2)) | (1<<2);     //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 1: P2.2 P2.3 P2.4 
             -P2.5, 2: P5.4 P4.0 P4.1 P4.3, 3: P3.5 P3.4 P3.3 P3.2
  104   1          P_SW1 = (P_SW1 & ~(3<<2)) | (0<<2);     //IO口切换. 0: P1.2/P5.4 P1.3 P1.4 P1.5, 1: P2.2 P2.3 P2.4 P2.5
             -, 2: P5.4 P4.0 P4.1 P4.3, 3: P3.5 P3.4 P3.3 P3.2
  105   1      //    P_PM25LV040_SCK = 0;    // set clock to low initial state
  106   1      //    P_PM25LV040_SI = 1;
  107   1          SPIF = 1;   //清SPIF标志
  108   1          WCOL = 1;   //清WCOL标志
  109   1      
  110   1          HSSPI_CFG2 |= 0x20;         //使能SPI高速模式
  111   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       162     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
C251 COMPILER V5.60.0,  spi                                                                29/10/24  08:37:10  PAGE 3   

  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
